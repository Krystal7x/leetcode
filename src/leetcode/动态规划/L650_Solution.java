package leetcode.动态规划;

/**
 * 描述:
 * 最初在一个记事本上只有一个字符 ‘A’。你每次可以对这个记事本进行两种操作：
 * <p>
 * Copy All (复制全部) : 你可以复制这个记事本中的所有字符(部分的复制是不允许的)。
 * Paste (粘贴) : 你可以粘贴你上一次复制的字符。
 * 1
 * 2
 * 给定一个数字 n 。你需要使用最少的操作次数，在记事本中打印出恰好 n 个 ‘A’。输出能够打印出 n 个 ‘A’ 的最少操作次数。
 * 示例 1:
 * <p>
 * 输入: 3
 * 输出: 3
 * 解释:
 * 最初, 我们只有一个字符 'A'。
 * 第 1 步, 我们使用 Copy All 操作。
 * 第 2 步, 我们使用 Paste 操作来获得 'AA'。
 * 第 3 步, 我们使用 Paste 操作来获得 'AAA'。
 *
 * @author luokui
 * @create 2020-06-03 20:42
 */
public class L650_Solution {

    /**
     * 思路分析： 由于只能复制全部，或者粘贴剪切板，即如果num可以被复制出，只有两种可能，
     * 它是有一个一个单独的’A’组合而成，
     * 二是它的某个因子粘贴多次而得到。
     * 比如21，可以由7粘贴2次（之前就有一次7），或者由3粘贴6次（之前就有一个3），
     * 而3需要3次才能得到，7需要7次才能得到，故21至少需要9 + 1次（当你得到7或者3时，你需要进行一次复制才能进行粘贴）。
     *
     * @param n
     * @return
     */
    public int minSteps(int n) {
        if (n == 1) return 0;

        int[] dp = new int[n + 1];
        for (int i = 2; i < dp.length; i++) {
            dp[i] = i;
            for (int j = 1; j < i; j++) {
                if (i % j == 0) {
                    dp[i] = Math.min(dp[i], dp[j] + (i - j) / j + 1);
                }
            }
        }
        return dp[n];
    }
}
